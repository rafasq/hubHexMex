-- Active: 1659109364264@@127.0.0.1@3306@mavdb

-- CREATE DATABASE
CREATE DATABASE DEMODBMAV;
-- SWITCH TO DATABASE
USE DEMODBMAV;
-- REMOVE DATABASE
DROP DATABASE DEMODBMAV;

USE SAKILA;
SELECT * FROM FILM,ACTOR;

USE MAVDB;
-- DDL STATEMENTS
-- CONSTRAINTS / PRIMARY KEY - NO NULL VALUES OR DUPLICATES ALLOWED
DROP TABLE AUTHOR;
CREATE TABLE AUTHOR (
AUTHOR_ID INT NOT NULL PRIMARY KEY ,
AUTHOR_NAME VARCHAR(50) NOT NULL,
CITY VARCHAR(50) NULL
);

CREATE TABLE BOOK(
BOOK_ID INT PRIMARY KEY AUTO_INCREMENT,
BOOK_NAME VARCHAR(50) NOT NULL,
AUTHOR_ID INT ,
FOREIGN KEY (AUTHOR_ID) REFERENCES AUTHOR(AUTHOR_ID)
);

-- DML STATEMENTS
-- INSERT RECORDS
INSERT INTO AUTHOR VALUES (1, 'SIMON SINEK','MEXICO CITY');
-- COLUMN COUNT MATCH MISMATCH
INSERT INTO AUTHOR VALUES (5, 'SIMON SINEK');
SELECT * FROM AUTHOR;
-- INSERTS ARE ATOMIC / ENTIRE ROW GETS INSERTED OR NOTHING GETS INSERTED.
-- INSERT ALL VALUES

INSERT INTO AUTHOR VALUES (1, 'HECTOR GARCIA','TOKYO');
-- INSERT PARTIAL VALUES
INSERT INTO AUTHOR (AUTHOR_ID, AUTHOR_NAME) VALUES (3, 'RYAN HOLIDAY');
INSERT INTO AUTHOR VALUES (4, 'RYAN HOLIDAY', NULL);
INSERT INTO AUTHOR VALUES (5, 'ROBIN  SHARMA', NULL);
INSERT INTO AUTHOR VALUES (6, 'J K ROWLING', NULL);
USE MAVDB;
-- WRONG
SELECT * FROM AUTHOR WHERE CITY = NULL;
SELECT * FROM AUTHOR WHERE CITY != NULL;
SELECT * FROM AUTHOR WHERE CITY IS NULL;
SELECT * FROM AUTHOR WHERE CITY IS NOT NULL;
SELECT * FROM AUTHOR WHERE NOT  CITY IS NULL;

SELECT * FROM AUTHOR WHERE NOT CITY IS NOT NULL;
-- TEST NULL FOR PRIMARY KEY
-- AUTHOR_ID CANNOT BE NULL
INSERT INTO AUTHOR (AUTHOR_ID, AUTHOR_NAME) VALUES (NULL, 'RYAN HOLIDAY');
-- AUTHOR_NAME CANNOT BE NULL
INSERT INTO AUTHOR (AUTHOR_ID, CITY) VALUES (7, 'NEW YORK');
-- UPDATE RECORD
UPDATE AUTHOR SET CITY = 'MIAMI' WHERE AUTHOR_ID = 4;
-- DELETE RECORD
DELETE FROM AUTHOR WHERE AUTHOR_ID = 3;

SELECT * FROM BOOK;
INSERT INTO BOOK (BOOK_NAME,AUTHOR_ID) VALUES ('START WITH WHY', 1);
SELECT * FROM BOOK;
INSERT INTO BOOK (BOOK_NAME,AUTHOR_ID) VALUES ('START WITH WHY', 1);
-- FOREIGN KEY CONSTRAINT VIOLATION
INSERT INTO BOOK (BOOK_NAME,AUTHOR_ID) VALUES ('THE DAILY STOIC', 5);
-- ALLOWS NULLS
INSERT INTO BOOK (BOOK_NAME) VALUES ('THE DAILY STOIC');
INSERT INTO BOOK (BOOK_NAME) VALUES ('DEEP WORK');
INSERT INTO BOOK (BOOK_ID, BOOK_NAME) VALUES (2,"MAN'S SEARCH FOR MEANING");

-- COMPOSITE PRIMARY KEY
-- DUPLICATE FIRST NAME & LAST NAME, BUT FIRST NAME + LAST NAME IS UNIQUE
CREATE TABLE EMPLOYEE (
FNAME CHAR(10),
LNAME CHAR(10),
CITY CHAR(20),
PRIMARY KEY (FNAME, LNAME)
);
SELECT * FROM EMPLOYEE;
-- SAM + PETER
INSERT INTO EMPLOYEE VALUES ('SAM', 'PETER', 'MUMBAI'); 
INSERT INTO EMPLOYEE VALUES ('SAM', 'JOHN', 'MUMBAI'); 
INSERT INTO EMPLOYEE VALUES ('ELTON', 'JOHN', 'MUMBAI');
-- DUPLICATE COMPOSITE KEY 
INSERT INTO EMPLOYEE VALUES ('SAM', 'JOHN', 'CHENNAI'); 

-- COMPOSITE FOREIGN KEY
CREATE TABLE EMPLOYEEHOBBY (
-- HOBBYID INT PRIMARY KEY, 
FNAME CHAR(10),
LNAME CHAR(10),
HOBBY CHAR(20),
FOREIGN KEY (FNAME, LNAME) REFERENCES EMPLOYEE(FNAME, LNAME)
);
SELECT * FROM EMPLOYEEHOBBY;
INSERT INTO EMPLOYEEHOBBY VALUES ('SAM', 'PETER', 'CRICKET'); 
INSERT INTO EMPLOYEEHOBBY VALUES ('SAM', 'BILL', 'GOLF'); 
INSERT INTO EMPLOYEEHOBBY VALUES ('ELTON', 'JOHN', 'MUSIC'); 
INSERT INTO EMPLOYEEHOBBY VALUES ('BILLY', 'JOHN', 'SKYDIVE'); 


DROP TABLE TEST;
CREATE TABLE TEST(TESTID INT);
-- ALTER TABLE COMMAND
ALTER TABLE TEST
MODIFY COLUMN TESTID VARCHAR(10);
SELECT SYSDATE();
SELECT DAYOFMONTH(SYSDATE());
SELECT DAYNAME(SYSDATE());

USE SAKILA;
SELECT * FROM ACTOR;

-- UNIQUE CONSTRAINT
CREATE TABLE STUDENT (STUDENT_ID INT, STUDENT_NAME CHAR(50), EMAIL_ID CHAR(20) UNIQUE);
INSERT INTO STUDENT VALUES (1, 'BRAD', 'BRAD@HEX.COM');
SELECT * FROM STUDENT;
INSERT INTO STUDENT VALUES (2, 'BRAD 2', 'BRAD@HEX.COM');
INSERT INTO STUDENT VALUES (2, 'BRAD 2',  NULL);
INSERT INTO STUDENT VALUES (3, 'BRAD 3',  NULL);

CREATE TABLE STUDENT1 (STUDENT_ID INT PRIMARY KEY, STUDENT_NAME CHAR(50), EMAIL_ID CHAR(20) UNIQUE);
INSERT INTO STUDENT1 VALUES (1, 'BRAD', 'BRAD@HEX.COM');
SELECT * FROM STUDENT1;
INSERT INTO STUDENT1 VALUES (2, 'BRAD 2', 'BRAD@HEX.COM');
INSERT INTO STUDENT1 VALUES (2, 'BRAD 2',  NULL);
INSERT INTO STUDENT1 VALUES (3, 'BRAD 3',  NULL);
-- NO MULTIPLE PRIMARY KEYS
CREATE TABLE STUDENT2 (STUDENT_ID INT PRIMARY KEY, STUDENT_NAME CHAR(50) PRIMARY KEY, EMAIL_ID CHAR(20) UNIQUE);
-- MULTIPLE UNIQUE KEYS
SELECT * FROM STUDENT3;
CREATE TABLE STUDENT3 (STUDENT_ID INT PRIMARY KEY, STUDENT_NAME CHAR(50) UNIQUE, EMAIL_ID CHAR(20) UNIQUE);
INSERT INTO STUDENT3 VALUES (2, 'BRAD 2', 'BRAD@HEX.COM');
INSERT INTO STUDENT3 VALUES (3, 'BRAD 3',  'BRAD@HXY.COM');
INSERT INTO STUDENT3 VALUES (4, 'BRAD 3',  'BRAD@HXY.COM');
INSERT INTO STUDENT3 VALUES (3, 'BRAD 4',  'BRAD@HXY.COM');

-- FOREIGN KEY IN THE SAME TABLE

CREATE TABLE EMPLOYEE2 (EMPLOYEE_ID INT PRIMARY KEY, NAME CHAR(20), MANAGER_ID INT,
FOREIGN KEY(MANAGER_ID) REFERENCES EMPLOYEE2(EMPLOYEE_ID));
SELECT * FROM EMPLOYEE2;
DELETE FROM EMPLOYEE2;
INSERT INTO EMPLOYEE2 VALUES (1,'MIKE',NULL);
INSERT INTO EMPLOYEE2 VALUES (2,'DAVID',1);
INSERT INTO EMPLOYEE2 VALUES (3,'ROGER',2);
INSERT INTO EMPLOYEE2 VALUES (4,'JAMES',5);


CREATE TABLE EMPLOYEE3 (EMPLOYEE_ID INT PRIMARY KEY, NAME CHAR(20), MANAGER_ID INT REFERENCES EMPLOYEE2(EMPLOYEE_ID));
CREATE TABLE EMPLOYEE4 (EMPLOYEE_ID INT PRIMARY KEY, NAME CHAR(20), MANAGER_ID INT REFERENCES EMPLOYEE2(EMPLOYEE_ID));
SELECT * FROM EMPLOYEE3;
INSERT INTO EMPLOYEE3 VALUES (1,'MIKE',NULL);
INSERT INTO EMPLOYEE3 VALUES (2,'DAVID',1);
INSERT INTO EMPLOYEE3 VALUES (3,'ROGER',2);
INSERT INTO EMPLOYEE3 VALUES (4,'JAMES',5);

CREATE TABLE `employee3` (
  `EMPLOYEE_ID` int NOT NULL,
  `NAME` char(20) DEFAULT NULL,
  `MANAGER_ID` int DEFAULT NULL,
  PRIMARY KEY (`EMPLOYEE_ID`)
);

CREATE TABLE `employee2` (
  `EMPLOYEE_ID` int NOT NULL,
  `NAME` char(20) DEFAULT NULL,
  `MANAGER_ID` int DEFAULT NULL,
  PRIMARY KEY (`EMPLOYEE_ID`),
  KEY `MANAGER_ID` (`MANAGER_ID`),
  CONSTRAINT `employee2_ibfk_1` FOREIGN KEY (`MANAGER_ID`) REFERENCES `employee2` (`EMPLOYEE_ID`)
);

CREATE TABLE `employee4` (
  `EMPLOYEE_ID` int NOT NULL,
  `NAME` char(20) DEFAULT NULL,
  `MANAGER_ID` int DEFAULT NULL,
  PRIMARY KEY (`EMPLOYEE_ID`)
);


CREATE TABLE PLAYER (PLAYER_ID INT PRIMARY KEY, NAME CHAR(10));
SELECT * FROM PLAYER;
INSERT INTO PLAYER VALUES (1, 'DHONI');
INSERT INTO PLAYER VALUES (2, 'SACHIN');
DELETE FROM PLAYER WHERE PLAYER_ID = 2;
DELETE FROM PLAYER WHERE PLAYER_ID = 1;

-- SQL SERVER, ORACLE SUPPORTS THEM

DROP TABLE MATCHPLAYED;
CREATE TABLE MATCHPLAYED (MATCH_ID INT PRIMARY KEY, PLAYER_ID INT, MATCHNAME CHAR(10),
FOREIGN KEY(PLAYER_ID) REFERENCES  PLAYER (PLAYER_ID) ON DELETE CASCADE
);
CREATE TABLE `matchplayed` (
  `MATCH_ID` int NOT NULL,
  `PLAYER_ID` int DEFAULT NULL,
  `MATCHNAME` char(10) DEFAULT NULL,
  PRIMARY KEY (`MATCH_ID`),
  CONSTRAINT `matchplayed_ibfk_1` FOREIGN KEY (`MATCH_ID`) REFERENCES `player` (`PLAYER_ID`)
);


INSERT INTO MATCHPLAYED VALUES (1, 1, 'T20'); 
 
SELECT * FROM MATCHPLAYED;

CREATE TABLE `matchplayed` (
  `MATCH_ID` int NOT NULL,
  `PLAYER_ID` int DEFAULT NULL,
  `MATCHNAME` char(10) DEFAULT NULL,
  PRIMARY KEY (`MATCH_ID`)
);

DROP TABLE PLAYER, MATCHPLAYED;
-- ON DELETE SET NULL
CREATE TABLE PLAYER (PLAYER_ID INT PRIMARY KEY, NAME CHAR(10));
SELECT * FROM PLAYER;
INSERT INTO PLAYER VALUES (1, 'DHONI');
INSERT INTO PLAYER VALUES (2, 'SACHIN');
DELETE FROM PLAYER WHERE PLAYER_ID = 2;
DELETE FROM PLAYER WHERE PLAYER_ID = 1;

-- SQL SERVER, ORACLE SUPPORTS THEM

DROP TABLE MATCHPLAYED;
CREATE TABLE MATCHPLAYED (MATCH_ID INT PRIMARY KEY, PLAYER_ID INT, MATCHNAME CHAR(10),
FOREIGN KEY(PLAYER_ID) REFERENCES  PLAYER (PLAYER_ID) ON DELETE SET NULL
);


USE MAVDB;
SELECT * FROM BOOK, AUTHOR;
SELECT * FROM AUTHOR;